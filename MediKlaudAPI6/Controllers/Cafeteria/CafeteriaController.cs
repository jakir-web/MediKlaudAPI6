using MediKlaudAPI6.FormQuery.Cafeteria;
using MediKlaudAPI6.Interface.Cafeteria;
using MediKlaudAPI6.Models;
using MediKlaudAPI6.Models.Cafeteria;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace MediKlaudAPI6.Controllers.Cafeteria
{
    [Route("api/[controller]")]
    [ApiController]
    public class CafeteriaController : ControllerBase
    {
        private readonly ICafeteriaService _cafeteria;
        public CafeteriaController(ICafeteriaService cafeteria)
        {
            this._cafeteria = cafeteria;
        }

        //Cafeteria

        [HttpGet]
        [Route("GetCafeteriaData")]
        public async Task<string> GetCafeteriaData([FromQuery] GetCafeteriaDataQuery getCafeteriaDataQuery)
        {
            return await _cafeteria.getCafeteriaData(getCafeteriaDataQuery);
        }


        [HttpGet]
        [Route("GetCafeteriaDataList")]
        public async Task<string> GetCafeteriaDataList([FromQuery] GetCafeteriaDataListQuery getCafeteriaDataListQuery)
        {
            return await _cafeteria.getCafeteriaDataList(getCafeteriaDataListQuery);
        }


        [HttpPost]
        [Route("AddCafeteria")]
        public async Task<IActionResult> Task(CafeteriaSave addCafeteria)
        {
            return Ok(await _cafeteria.addCafeteria(addCafeteria));
        }




        //Cafeteria Item

        [HttpGet]
        [Route("GetCafeteriaItemData")]
        public async Task<string> GetCafeteriaItemData([FromQuery] GetCafeteriaItemDataQuery getCafeteriaItemDataQuery)
        {
            return await _cafeteria.getCafeteriaItemData(getCafeteriaItemDataQuery);
        }


        [HttpGet]
        [Route("GetCafeteriaItemDataList")]
        public async Task<string> GetCafeteriaItemDataList([FromQuery] GetCafeteriaItemDataListQuery getCafeteriaItemDataListQuery)
        {
            return await _cafeteria.getCafeteriaItemDataList(getCafeteriaItemDataListQuery);
        }


        [HttpPost]
        [Route("AddCafeteriaItem")]
        public async Task<IActionResult> Task(CafeteriaItemSave addCafeteriaItem)
        {
            return Ok(await _cafeteria.addCafeteriaItem(addCafeteriaItem));
        }


        [HttpGet]
        [Route("GetAutoGenerateItemNo")]
        public async Task<string> GetAutoGenerateItemNo([FromQuery] GetAutoGeneratedItemNoQuery getAutoGeneratedItemNoQuery)
        {
            return await _cafeteria.getAutoGenerateItemNo(getAutoGeneratedItemNoQuery);

        }

        [HttpGet]
        [Route("GetUomList")]
        public async Task<string> GetUomList([FromQuery] GetAllCmbListQuery getAllCmbListQuery)
        {
            return await _cafeteria.getUomList(getAllCmbListQuery);
 
        }

        [HttpGet]
        [Route("GetManufacturerList")]
        public async Task<string> GetManufacturerList([FromQuery] GetAllCmbListQuery getAllCmbListQuery)
        {
            return await _cafeteria.getManufacturerList(getAllCmbListQuery);

        }

        [HttpGet]
        [Route("GetSupplierList")]
        public async Task<string> GetSupplierList([FromQuery] GetAllCmbListQuery getAllCmbListQuery)
        {
            return await _cafeteria.getSupplierList(getAllCmbListQuery);

        }

        [HttpGet]
        [Route("GetCategoryList")]
        public async Task<string> GetCategoryList([FromQuery] GetAllCmbListQuery getAllCmbListQuery)
        {
            return await _cafeteria.getCategoryList(getAllCmbListQuery);

        }

        [HttpGet]
        [Route("GetCountryList")]
        public async Task<string> GetCountryList([FromQuery] GetAllCmbListQuery getAllCmbListQuery)
        {
            return await _cafeteria.getCounryList(getAllCmbListQuery);

        }
    }
}
